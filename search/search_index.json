{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"golang-cli-template An opinionated template for new Golang cli projects. Logo The logo is based on the create-go-app . Please find all information here .","title":"Home"},{"location":"#logo","text":"The logo is based on the create-go-app . Please find all information here .","title":"Logo"},{"location":"dev-guide/code_of_conduct/","text":"Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at {{ email }}. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html","title":"Code of conduct"},{"location":"dev-guide/code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"dev-guide/code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"dev-guide/code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"dev-guide/code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"dev-guide/code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"dev-guide/code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at {{ email }}. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"dev-guide/code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html","title":"Attribution"},{"location":"dev-guide/contributing/","text":"Contributing By participating in this project, you agree to abide our code of conduct . Set up your machine golang-cli-template is written in Go . Prerequisites: Go 1.19+ Other things you might need to run the tests: Docker Clone golang-cli-template anywhere: git clone git@github.com:thazelart/golang-cli-template.git cd into the directory and install the dependencies: make local/deps Test your change You can create a branch for your changes and try to build from the source as you go: make go/build When you are satisfied with the changes, we suggest you run: make go/test Before you commit the changes, we also suggest you run: make pre-commit Create a commit Commit messages should be well formatted, and to make that \"standardized\", we are using Conventional Commits. You can follow the documentation on their website . Submit a pull request Push your branch to your golang-cli-template fork and open a pull request against the main branch. Credit This CONTRIBUTING guideline is very inspired by the goreleaser . Thanks goreleaser .","title":"Contributing"},{"location":"dev-guide/contributing/#contributing","text":"By participating in this project, you agree to abide our code of conduct .","title":"Contributing"},{"location":"dev-guide/contributing/#set-up-your-machine","text":"golang-cli-template is written in Go . Prerequisites: Go 1.19+ Other things you might need to run the tests: Docker Clone golang-cli-template anywhere: git clone git@github.com:thazelart/golang-cli-template.git cd into the directory and install the dependencies: make local/deps","title":"Set up your machine"},{"location":"dev-guide/contributing/#test-your-change","text":"You can create a branch for your changes and try to build from the source as you go: make go/build When you are satisfied with the changes, we suggest you run: make go/test Before you commit the changes, we also suggest you run: make pre-commit","title":"Test your change"},{"location":"dev-guide/contributing/#create-a-commit","text":"Commit messages should be well formatted, and to make that \"standardized\", we are using Conventional Commits. You can follow the documentation on their website .","title":"Create a commit"},{"location":"dev-guide/contributing/#submit-a-pull-request","text":"Push your branch to your golang-cli-template fork and open a pull request against the main branch.","title":"Submit a pull request"},{"location":"dev-guide/contributing/#credit","text":"This CONTRIBUTING guideline is very inspired by the goreleaser . Thanks goreleaser .","title":"Credit"},{"location":"golang-cli-template/features/","text":"Here is the list of all the features included in this CLI template. The whole thing is templated thanks to go-archetype . CLI The base of a cli using cobra (including the version command) Everything needed to test using testify Docker The optimized and secured Dockerfile CI / CD Basic GitHub actions code coverage using codecov Release management using goreleaser : Generate the completions scripts Generate the man pages Push images for homebrew , apt , yum and apk Generate the .rpm , .deb and .apk package files Documentation Documentation on github pages using MkDocs","title":"Features"},{"location":"golang-cli-template/features/#cli","text":"The base of a cli using cobra (including the version command) Everything needed to test using testify","title":"CLI"},{"location":"golang-cli-template/features/#docker","text":"The optimized and secured Dockerfile","title":"Docker"},{"location":"golang-cli-template/features/#ci-cd","text":"Basic GitHub actions code coverage using codecov Release management using goreleaser : Generate the completions scripts Generate the man pages Push images for homebrew , apt , yum and apk Generate the .rpm , .deb and .apk package files","title":"CI / CD"},{"location":"golang-cli-template/features/#documentation","text":"Documentation on github pages using MkDocs","title":"Documentation"},{"location":"golang-cli-template/getting-started/","text":"We are using rantav/go-archetype to enable the creation of new projects from that template. Install go-archetype $ go install github.com/rantav/go-archetype@latest Set the main variables $ DEST_FOLDER = /path/to/destination # Non existing folder $ REPO_BASE_URL = github.com $ REPO_USER = thazelart $ REPO_NAME = my-awesome-cli Generate your project's base $ go-archetype transform \\ --transformations .go-archetype.yaml \\ --source . \\ --destination ${ DEST_FOLDER } \\ -- \\ --repo_base_url ${ REPO_BASE_URL } \\ --repo_user ${ REPO_USER } \\ --repo_name ${ REPO_NAME } Answer the questions. Init your git repository and push $ cd ${ DEST_FOLDER } $ git init $ git add . $ git commit -m \"first commit\" $ git branch -M main $ git remote add origin git@ ${ REPO_BASE_URL } : ${ REPO_USER } / ${ REPO_NAME } .git $ git push -u origin main About the License As you may have notices the LICENSE file is missing. Please add the according Licence file at the root of your fresh new repository. You can find most of the licenses here . Enjoy developing your awesome cli.","title":"Getting started"},{"location":"golang-cli-template/getting-started/#install-go-archetype","text":"$ go install github.com/rantav/go-archetype@latest","title":"Install go-archetype"},{"location":"golang-cli-template/getting-started/#set-the-main-variables","text":"$ DEST_FOLDER = /path/to/destination # Non existing folder $ REPO_BASE_URL = github.com $ REPO_USER = thazelart $ REPO_NAME = my-awesome-cli","title":"Set the main variables"},{"location":"golang-cli-template/getting-started/#generate-your-projects-base","text":"$ go-archetype transform \\ --transformations .go-archetype.yaml \\ --source . \\ --destination ${ DEST_FOLDER } \\ -- \\ --repo_base_url ${ REPO_BASE_URL } \\ --repo_user ${ REPO_USER } \\ --repo_name ${ REPO_NAME } Answer the questions.","title":"Generate your project's base"},{"location":"golang-cli-template/getting-started/#init-your-git-repository-and-push","text":"$ cd ${ DEST_FOLDER } $ git init $ git add . $ git commit -m \"first commit\" $ git branch -M main $ git remote add origin git@ ${ REPO_BASE_URL } : ${ REPO_USER } / ${ REPO_NAME } .git $ git push -u origin main About the License As you may have notices the LICENSE file is missing. Please add the according Licence file at the root of your fresh new repository. You can find most of the licenses here . Enjoy developing your awesome cli.","title":"Init your git repository and push"},{"location":"golang-cli-template/customization/doc/","text":"If you choose to enable this documentation you can tweak the basic configuration. For more information please have a look at the official MkDocs and Material for MkDocs documentation.","title":"Documentation"},{"location":"golang-cli-template/customization/release/","text":"Yum and APT We are using Gemfury as a hoster for our APT and Yum repository. For more information please have a look at the official documentation .","title":"Release"},{"location":"golang-cli-template/customization/release/#yum-and-apt","text":"We are using Gemfury as a hoster for our APT and Yum repository. For more information please have a look at the official documentation .","title":"Yum and APT"},{"location":"user-guide/getting-started/","text":"Install You can install the pre-compiled binary (in several ways), use Docker or compile from source (when on OSS). Below you can find the steps for each of them. Install the pre-compiled binary homebrew tap apt yum brew install thazelart/tap/golang-cli-template echo 'deb [trusted=yes] https://apt.fury.io/thazelart/ /' | sudo tee /etc/apt/sources.list.d/thazelart.list sudo apt update sudo apt install golang-cli-template echo '[thazelart] name=Gemfury thazelart repository baseurl=https://yum.fury.io/thazelart/ enabled=1 gpgcheck=0' | sudo tee /etc/yum.repos.d/thazelart.repo sudo yum install goreleaser deb, rpm and apk packages Download the .deb, .rpm or .apk packages from the release page and install them with the appropriate tools. Manually go install Released tar file manually go install github.com/thazelart/golang-cli-template@latest Download the pre-compiled binaries from the release page page and copy them to the desired location. $ VERSION = v1.0.0 $ OS = Linux $ ARCH = x86_64 $ TAR_FILE = golang-cli-template_ ${ OS } _ ${ ARCH } .tar.gz $ wget https://github.com/thazelart/golang-cli-template/releases/download/ ${ VERSION } / ${ TAR_FILE } $ sudo tar xvf ${ TAR_FILE } golang-cli-template -C /usr/local/bin $ rm -f ${ TAR_FILE } $ git clone github.com/thazelart/golang-cli-template $ cd golang-cli-template $ go generate ./... $ go install","title":"Installation"},{"location":"user-guide/getting-started/#install","text":"You can install the pre-compiled binary (in several ways), use Docker or compile from source (when on OSS). Below you can find the steps for each of them.","title":"Install"},{"location":"user-guide/getting-started/#install-the-pre-compiled-binary","text":"homebrew tap apt yum brew install thazelart/tap/golang-cli-template echo 'deb [trusted=yes] https://apt.fury.io/thazelart/ /' | sudo tee /etc/apt/sources.list.d/thazelart.list sudo apt update sudo apt install golang-cli-template echo '[thazelart] name=Gemfury thazelart repository baseurl=https://yum.fury.io/thazelart/ enabled=1 gpgcheck=0' | sudo tee /etc/yum.repos.d/thazelart.repo sudo yum install goreleaser","title":"Install the pre-compiled binary"},{"location":"user-guide/getting-started/#deb-rpm-and-apk-packages","text":"Download the .deb, .rpm or .apk packages from the release page and install them with the appropriate tools.","title":"deb, rpm and apk packages"},{"location":"user-guide/getting-started/#manually","text":"go install Released tar file manually go install github.com/thazelart/golang-cli-template@latest Download the pre-compiled binaries from the release page page and copy them to the desired location. $ VERSION = v1.0.0 $ OS = Linux $ ARCH = x86_64 $ TAR_FILE = golang-cli-template_ ${ OS } _ ${ ARCH } .tar.gz $ wget https://github.com/thazelart/golang-cli-template/releases/download/ ${ VERSION } / ${ TAR_FILE } $ sudo tar xvf ${ TAR_FILE } golang-cli-template -C /usr/local/bin $ rm -f ${ TAR_FILE } $ git clone github.com/thazelart/golang-cli-template $ cd golang-cli-template $ go generate ./... $ go install","title":"Manually"},{"location":"user-guide/commands/version/","text":"Print the currently installed CLI version: $ golang-cli-template version golang-cli-template - v1.0.0 Git Commit: ee8538fa83f36ccf9910fe6fc0c42e56afaf07ca Build date: 2022 -12-17 17 :55:45 +0100 Go version: go1.19.4 OS / Arch : darwin arm64","title":"Version"}]}